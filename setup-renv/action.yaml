name: 'setup-renv'
description: 'Action to setup renv and install R dependencies in the lockfile'
author: 'step-security'
inputs:
  profile:
    description: 'The renv profile that should be activated. Forwarded to `renv::activate()`. Must be an R expression. Note that it often needs to be quoted in YAML, see the README for details.'
  cache-version:
    description: 'The version of the cache, change this from the default (1) to start over with a fresh cache'
    required: true
    default: 1
  bypass-cache:
    description: |
      Whether attempts to cache should be completely skipped (for non
      GitHub testing). Set to `true` to skip. If `"never"` is provided,
      the package cache will be saved even if the workflow fails.
      (For historical reasons the `"always"` value is equivalent to
      `"never"`.)
    default: "false"
  working-directory:
    description: 'Using the working-directory keyword, you can specify a subdirectory of the repo where `renv` should be run.'
    default: '.'
runs:
  using: "composite"
  steps:
      - name: Subscription check
        run: |
          # validate subscription status
          API_URL="https://agent.api.stepsecurity.io/v1/github/$GITHUB_REPOSITORY/actions/subscription"

          # Set a timeout for the curl command (3 seconds)
          RESPONSE=$(curl --max-time 3 -s -w "%{http_code}" "$API_URL" -o /dev/null) || true
          CURL_EXIT_CODE=${?}

          # Check if the response code is not 200
          if [ $CURL_EXIT_CODE -ne 0 ] || [ "$RESPONSE" != "200" ]; then
            if [ -z "$RESPONSE" ] || [ "$RESPONSE" == "000" ] || [ $CURL_EXIT_CODE -ne 0 ]; then
              echo "Timeout or API not reachable. Continuing to next step."
            else
              echo "Subscription is not valid. Reach out to support@stepsecurity.io"
              exit 1
            fi
          fi
        shell: bash
        
      - name: Set RENV_PATHS_ROOT
        shell: bash
        run: |
          echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

      - name: Install and activate renv
        run: |
          if (!requireNamespace("renv", quietly=TRUE)) install.packages("renv")
          renv::activate(profile = ${{ inputs.profile }})
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}

      - name: Get R and OS version
        id: get-version
        run: |
          cat("os-version=", sessionInfo()$running, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
          cat("r-version=", R.Version()$version.string, "\n", file = Sys.getenv("GITHUB_OUTPUT"), sep = "", append = TRUE)
        shell: Rscript {0}

      - name: Restore Renv package cache
        if: ${{ inputs.bypass-cache == 'false' }}
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.RENV_PATHS_ROOT }}
            renv/library
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-${{ hashFiles(format('{0}/renv.lock', inputs.working-directory)) }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Restore Renv package cache
        id: cache-packages-restore
        if: ${{ inputs.bypass-cache == 'always' || inputs.bypass-cache == 'never' }}
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.RENV_PATHS_ROOT }}
            renv/library
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-${{ hashFiles(format('{0}/renv.lock', inputs.working-directory)) }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install renv dependencies
        run: renv::restore()
        shell: Rscript {0}
        working-directory: ${{ inputs.working-directory }}

      - name: Don't use tar 1.30 from Rtools35 to store the cache
        shell: bash
        run: |
          if command -v /c/Rtools/bin/tar && /c/Rtools/bin/tar --version | grep -q 'tar (GNU tar) 1.30'
            then echo 'C:/Program Files/Git/usr/bin' >> $GITHUB_PATH
          fi

      - name: Save Renv package cache
        if: ${{ always() && steps.cache-packages-restore.outputs.cache-hit != 'true' && (inputs.bypass-cache == 'always' || inputs.bypass-cache == 'never') }}
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.RENV_PATHS_ROOT }}
            renv/library
          key: ${{ steps.cache-packages-restore.outputs.cache-primary-key }}
